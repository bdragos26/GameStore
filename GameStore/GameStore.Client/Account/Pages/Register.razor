@page "/register"
@inject NavigationManager NavigationManager
@inject IUserClient UserClient
@inject AuthenticationStateProvider AuthProvider
@rendermode InteractiveWebAssembly

<PageTitle>Register Account</PageTitle>

<h3 style="margin-top: 30px;">Register new account</h3>

<div class="row" style="margin-top: 30px;">
	<div class="col-md-6">
		<EditForm Model="@userRegister" OnValidSubmit="HandleRegisterAsync">
			<DataAnnotationsValidator />

			@if (!string.IsNullOrEmpty(errorMessage))
			{
				<div class="alert-danger">@errorMessage</div>
			}
			<div class="mb-3">
				<label for="username" class="form-label">Username:</label>
				<InputText id="username" class="form-control" @bind-Value="userRegister.Username" />
				<ValidationMessage For="@(() => userRegister.Username)" />
			</div>

			<div class="mb-3">
				<label for="email" class="form-label">Email:</label>
				<InputText id="email" class="form-control" @bind-Value="userRegister.Email" />
				<ValidationMessage For="@(() => userRegister.Email)" />
			</div>

			<div class="mb-3">
    <label for="password" class="form-label">Password:</label>
    <div class="input-group">
        <InputText id="password"
                   class="form-control"
                   type="@(showPassword ? "text" : "password")"
                   @bind-Value="userRegister.Password" />
        <button type="button"
                class="btn btn-outline-secondary"
                @onclick="TogglePassword"
                title="Show/hide password">
            <i class="bi @(showPassword ? "bi-eye-slash" : "bi-eye")"></i>
        </button>
    </div>
    <ValidationMessage For="@(() => userRegister.Password)" />
</div>


			<div class="row">
				<div class="col-md-6 mb-3">
					<label for="firstName" class="form-label">First Name:</label>
					<InputText id="firstName" class="form-control" @bind-Value="userRegister.FirstName" />
					<ValidationMessage For="@(() => userRegister.FirstName)" />
				</div>

				<div class="col-md-6 mb-3">
					<label for="lastName" class="form-label">Last Name:</label>
					<InputText id="lastName" class="form-control" @bind-Value="userRegister.LastName" />
					<ValidationMessage For="@(() => userRegister.LastName)" />
				</div>
			</div>

			<div class="mb-3">
				<label for="dateOfBirth" class="form-label">Date of Birth:</label>
				<InputDate id="dateOfBirth" class="form-control" @bind-Value="userRegister.DateOfBirth" />
			</div>

			<div class="mb-3 d-flex justify-content-between align-items-center">
				<button class="btn btn-primary" type="submit">Register</button>
				<NavLink class="btn btn-link" href="/login">Already have an account? Login</NavLink>
			</div>

		</EditForm>
	</div>
</div>

@code {
	private UserRegisterDto userRegister = new();
	private string? errorMessage;
	private bool showPassword = false;

	private async Task HandleRegisterAsync()
	{
		try
		{
			await UserClient.RegisterAsync(userRegister);

			UserLoginDTO loginDto = new UserLoginDTO()
			{
				Username = userRegister.Username,
				Password = userRegister.Password!
			};
			var user = await UserClient.LoginAsync(loginDto);

			if (user != null)
			{
				var customAuthProvider = (CustomAuthStateProvider)AuthProvider;
				await customAuthProvider.UpdateAuthenticationState(user);

				NavigationManager.NavigateTo("/");
			}
		}
		catch (Exception e)
		{
			errorMessage = e.Message;
		}
	}

	private void TogglePassword()
	{
		showPassword = !showPassword;
	}
}
