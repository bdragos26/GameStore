@page "/profile"
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage
@inject IUserClient UserClient
@inject IGameRatingClient GameRatingClient
@inject NavigationManager NavigationManager
@rendermode InteractiveWebAssembly

<h3 class="mb-4" style="margin-top: 30px;">Your Profile</h3>

<AuthorizeView>
    <Authorized>
        @if (user == null)
        {
            <div class="alert alert-info">Loading user...</div>
        }
        else
        {
            <div class="card shadow rounded p-4 border border-secondary-subtle bg-light" style="max-width: 1000px;">
                @if (!isEditing)
                {
                    <div class="d-flex align-items-center mb-4">
                        <i class="bi bi-person-circle fs-1 text-secondary me-3"></i>
                        <div>
                            <h4 class="mb-0">@user.Username</h4>
                            <span class="text-muted">Member since @user.CreatedAt.ToString("yyyy-MM-dd")</span>
                        </div>
                    </div>
                    <dl class="row mb-0">
	                    <dt class="col-sm-4 text-secondary">Email:</dt>
	                    <dd class="col-sm-8">@user.Email</dd>
	                    <dt class="col-sm-4 text-secondary">Username:</dt>
	                    <dd class="col-sm-8">@user.Username</dd>
	                    <dt class="col-sm-4 text-secondary">First Name:</dt>
	                    <dd class="col-sm-8">@user.FirstName</dd>
	                    <dt class="col-sm-4 text-secondary">Last Name:</dt>
	                    <dd class="col-sm-8">@user.LastName</dd>
	                    <dt class="col-sm-4 text-secondary">Date of Birth:</dt>
	                    <dd class="col-sm-8">@user.DateOfBirth?.ToString("yyyy-MM-dd")</dd>
	                    <dt class="col-sm-4 text-secondary">User ID:</dt>
	                    <dd class="col-sm-8">@user.UserId</dd>
                    </dl>
                    <button class="btn btn-primary mt-3" @onclick="EnableEdit">Edit</button>

                    @if (userRatings == null)
                    {
	                    <p>Loading user ratings...</p>
                    }
                    else if(!userRatings.Any())
                    {
	                    <p>You didn't rate any game yet</p>
                    }
                    else
                    {
	                    <h4 class="mb-3 mt-4">Games you rated</h4>
	                    <div class="list-group">
		                    @foreach (var rating in userRatings)
		                    {
			                    <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-center"
			                         @onclick="@(() => GoToGameDetail(rating.GameDetails.GameId))"
			                         style="cursor: pointer">
				                    <div>
					                    <strong>@rating.GameDetails?.Name</strong>
				                    </div>
				                    <div>
					                    @for (int i = 1; i <= 5; i++)
					                    {
						                    if (i <= rating.Score)
						                    {
							                    <i class="bi bi-star-fill" style="color: gold"></i>
						                    }
						                    else
						                    {
							                    <i class="bi bi-star"></i>
						                    }
					                    }
				                    </div>
			                    </div>
		                    }
	                    </div>

                    }
                }
                else
                {
	                <EditForm Model="editUser" OnValidSubmit="SaveChanges" Context="formContext">
		                <DataAnnotationsValidator />

		                <div class="mb-2">
			                <label for="username" class="form-label">Username</label>
			                <InputText id="username" class="form-control" @bind-Value="editUser.Username" />
			                <ValidationMessage For="@(() => editUser.Username)" />
		                </div>

		                <div class="mb-2">
			                <label for="firstName" class="form-label">First Name</label>
                            <InputText id="firstName" class="form-control" @bind-Value="editUser.FirstName" />
			                <ValidationMessage For="@(() => editUser.FirstName)" />
		                </div>

		                <div class="mb-2">
                            <label for="lastName" class="form-label">Last Name</label>
                            <InputText id="lastName" class="form-control" @bind-Value="editUser.LastName" />
			                <ValidationMessage For="@(() => editUser.LastName)" />
		                </div>

		                <div class="mb-2">
			                <label for="dateOfBirth" class="form-label">Date of Birth</label>
			                <InputDate id="dateOfBirth" class="form-control" @bind-Value="editUser.DateOfBirth" />
		                </div>

		                <div class="mb-2">
			                <label for="email" class="form-label">Email</label>
			                <InputText id="email" class="form-control" @bind-Value="editUser.Email" />
			                <ValidationMessage For="@(() => editUser.Email)" />
		                </div>

		                <div class="d-flex gap-2 mt-3">
			                <button class="btn btn-success" type="submit">Save</button>
			                <button class="btn btn-secondary" @onclick="CancelEdit" type="button">Cancel</button>
		                </div>
	                </EditForm>
	                <br/>
                    <NavLink href="/ChangePassword" class="btn btn-warning">Change password</NavLink>
                }
            </div>
        }
    </Authorized>
    <Authorizing>
        <div class="d-flex align-items-center">
            <div class="spinner-border spinner-border-sm text-secondary me-2" role="status"></div>
            <span>Checking authentication...</span>
        </div>
    </Authorizing>
</AuthorizeView>

@code {
    private User? user;
    private User? editUser;
    private bool isEditing = false;
    private List<GameRating> userRatings;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            user = await LocalStorage.GetItemAsync<User>("user");
            if (user != null)
            {
	            userRatings = await GameRatingClient.GetRatingsByUserAsync(user.UserId);
            }
            StateHasChanged();
        }
    }

    private void EnableEdit()
    {
        if (user != null)
        {
            editUser = new User
            {
                UserId = user.UserId,
                Username = user.Username,
                Email = user.Email,
                PasswordHash = user.PasswordHash,
                FirstName = user.FirstName,
                LastName = user.LastName,
                DateOfBirth = user.DateOfBirth,
                CreatedAt = user.CreatedAt,
                Role = user.Role
            };
            isEditing = true;
        }
    }

    private async Task SaveChanges()
    {
        if (editUser != null)
        {
            await UserClient.UpdateUserAsync(editUser);
            user = editUser;
            await LocalStorage.SetItemAsync("user", user);
            isEditing = false;
        }
    }

    private void CancelEdit()
    {
        isEditing = false;
        editUser = null;
    }

    private void GoToGameDetail(int gameId)
    {
        NavigationManager.NavigateTo($"/GameDetails/{gameId}");
    }
}
