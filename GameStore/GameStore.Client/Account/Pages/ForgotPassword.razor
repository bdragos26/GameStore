@page "/forgotPass"
@inject IUserClient UserClient
@inject ILogger<ForgotPassword> Logger
@inject IStringLocalizer<SharedResources> L

<PageTitle>@L["ForgotPassword"]</PageTitle>

<h3>@L["Forgot Password?"]</h3>

<EditForm Model="@forgotPasswordDto" OnValidSubmit="HandleForgotPassword">
    <DataAnnotationsValidator />
    
    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert @(isSuccess ? "alert-success" : "alert-danger")">@message</div>
    }

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" class="form-control" @bind-Value="forgotPasswordDto.Email" />
        <ValidationMessage For="@(() => forgotPasswordDto.Email)" />
    </div>

    <button type="submit" class="btn btn-primary" disabled="@isProcessing">
        @if (isProcessing)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span class="ms-2">@L["Processing"]</span>
        }
        else
        {
            <span>@L["Send Reset Link"]</span>
        }
    </button>
</EditForm>

@code {
    private ForgotPasswordDto forgotPasswordDto = new();
    private string message = string.Empty;
    private bool isSuccess = false;
    private bool isProcessing = false;

    private async Task HandleForgotPassword()
    {
        try
        {
            isProcessing = true;
            await UserClient.RequestPasswordReset(forgotPasswordDto);
            message = "If an account exists with this email, we've sent a password reset link.";
            isSuccess = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error requesting password reset for email: {Email}", forgotPasswordDto.Email);
            message = "An error occurred while processing your request. Please try again later.";
            isSuccess = false;
        }
        finally
        {
            isProcessing = false;
        }
    }
}