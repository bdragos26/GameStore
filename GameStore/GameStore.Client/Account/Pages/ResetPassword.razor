@page "/reset-password"
@inject IUserClient UserClient
@inject NavigationManager NavigationManager
@inject IStringLocalizer<SharedResources> L

<PageTitle>@L["Reset Password"]</PageTitle>

<h3>@L["Reset Password"]</h3>

<EditForm Model="@resetPasswordDto" OnValidSubmit="HandleResetPassword">
    <DataAnnotationsValidator />

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert @(isSuccess ? "alert-success" : "alert-danger")">@message</div>
    }

    <input type="hidden" @bind="resetPasswordDto.Token" />

    <div class="mb-3">
        <label for="newPassword" class="form-label">@L["New password"]</label>
	    <div class="input-group">
		    <InputText id="newPassword"
		               type="@(showNewPassword ? "text" : "password")"
		               class="form-control"
		               @bind-Value="resetPasswordDto.NewPassword" />
		    <button type="button"
		            class="btn btn-outline-secondary"
		            @onclick="ToggleNewPasswordVisibility"
		            title="Show/hide password">
			    <i class="bi @(showNewPassword ? "bi-eye-slash" : "bi-eye")"></i>
		    </button>
	    </div>
	    <ValidationMessage For="@(() => resetPasswordDto.NewPassword)" />
    </div>

    <div class="mb-3">
        <label for="confirmPassword" class="form-label">@L["Confirm New Password"]</label>
	    <div class="input-group">
		    <InputText id="confirmPassword"
		               type="@(showConfirmPassword ? "text" : "password")"
		               class="form-control"
		               @bind-Value="resetPasswordDto.ConfirmPassword" />
		    <button type="button"
		            class="btn btn-outline-secondary"
		            @onclick="ToggleConfirmPasswordVisibility"
		            title="Show/hide password">
			    <i class="bi @(showConfirmPassword ? "bi-eye-slash" : "bi-eye")"></i>
		    </button>
	    </div>
	    <ValidationMessage For="@(() => resetPasswordDto.ConfirmPassword)" />
    </div>

    <button type="submit" class="btn btn-primary" disabled="@isLoading">
        @if (isLoading)
        {
            <span>@L["Processing"]</span>
        }
        else
        {
            <span>@L["Reset Password"]</span>
        }
    </button>

    @if (isLoading)
    {
        <div class="mt-3">
            <div class="progress">
                <div class="progress-bar progress-bar-striped progress-bar-animated"
                     role="progressbar" style="width: 100%"></div>
            </div>
            <p class="text-center mt-2">Redirecting to login page...</p>
        </div>
    }
</EditForm>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string? Token { get; set; }

    private ResetPasswordWithTokenDto resetPasswordDto = new();
    private string message = string.Empty;
    private bool isSuccess = false;
    private bool isLoading = false;
    private bool showNewPassword = false;
    private bool showConfirmPassword = false;

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(Token))
        {
            resetPasswordDto.Token = Token;
        }
    }

    private async Task HandleResetPassword()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            await UserClient.ResetPasswordWithToken(resetPasswordDto);
            message = "Your password has been reset successfully. You can now login with your new password.";
            isSuccess = true;

            await Task.Delay(2000);
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            message = ex.Message;
            isSuccess = false;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ToggleNewPasswordVisibility()
    {
	    showNewPassword = !showNewPassword;
    }

    private void ToggleConfirmPasswordVisibility()
    {
	    showConfirmPassword = !showConfirmPassword;
    }
}