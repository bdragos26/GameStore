@page "/login"
@using GameStore.Client.Services.ApiClients
@inject NavigationManager NavigationManager
@inject IUserClient UserClient
@inject AuthenticationStateProvider AuthProvider
@rendermode InteractiveWebAssembly

<PageTitle>Login</PageTitle>

<h3 style="margin-top: 30px;">Login</h3>

<div class="row" style="margin-top: 30px;">
    <div class="col-md-4">
        <EditForm Model="@userDto" OnValidSubmit="HandleLoginAsync" FormName="loginForm">
            <DataAnnotationsValidator />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">
                    @errorMessage
                </div>
            }

            <div class="mb-3">
                <label for="username" class="form-label">Username:</label>
                <InputText id="username" class="form-control" @bind-Value="userDto.Username" />
                <ValidationMessage For="@(() => userDto.Username)" />
            </div>

            <div class="mb-3 position-relative">
	            <label for="password" class="form-label">Password:</label>
	            <InputText id="password" class="form-control" 
	                       type="@(showPassword ? "text" : "password")"
	                       @bind-Value="userDto.Password" />
	            <button type="button" class="btn btn-outline-secondary btn-sm position-absolute end-0 top-0 mt-8 me-2"
	                    @onclick="TogglePassword">
		            <i class="bi @( showPassword ? "bi-eye-slash" : "bi-eye" )"></i>
	            </button>
	            <ValidationMessage For="@(() => userDto.Password)" />
            </div>

            <div class="mb-3 d-flex justify-content-between align-items-center">
	            <button class="btn btn-primary" type="submit">Login</button>
	            <NavLink class="btn btn-primary" href="/register">Register</NavLink>
            </div>
            <div class="mb-3 text-end">
                <NavLink class="btn btn-primary" href="/forgotPass">Forgot Password?</NavLink>
            </div>
        </EditForm>
    </div>
</div>

@code {
	private UserLoginDTO userDto = new();
	private string? errorMessage;
	private bool showPassword = false;


	private void TogglePassword()
	{
		showPassword = !showPassword;
	}
    private async Task HandleLoginAsync()
    {
	    try
	    {
		    var user = await UserClient.LoginAsync(userDto);
		    if (user != null)
		    {
			    var customAuthProvider = (CustomAuthStateProvider)AuthProvider;
			    await customAuthProvider.UpdateAuthenticationState(user);

			    NavigationManager.NavigateTo("/", true);
		    }
		    else
		    {
			    errorMessage = "Invalid username or password";
		    }
	    }
	    catch (Exception ex)
	    {
		    errorMessage = ex.Message;
	    }
    }
}