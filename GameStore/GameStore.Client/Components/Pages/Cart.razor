@page "/cart"
@inject ICartClient CartClient
@implements IDisposable

<h3>My Cart</h3>

@if (cartProducts == null)
{
    <p>Loading Cart...</p>
}
else if (cartProducts.Count == 0)
{
    <p>Cart empty.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Game</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Total</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in cartProducts)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>$@item.Price</td>
                    <td>
                        <input type="number" min="1" value="@item.Quantity"
                               @onchange="@((e) => UpdateQuantity(item, int.Parse(e.Value?.ToString() ?? "1")))"
                               style="width: 60px;" />
                    </td>
                    <td>$@(item.Price * item.Quantity)</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => RemoveFromCart(item.GameId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <h5>Total: $@cartProducts.Sum(x => x.Price * x.Quantity)</h5>
}

@code {
    private List<CartItem> cartProducts = new();

    protected override async Task OnInitializedAsync()
    {
	    CartClient.OnChange += HandleCartChange;
	    await CartClient.InitializeSignalR();
	    await LoadCart();
    }

    private async void HandleCartChange()
    {
	    await LoadCart();
	    StateHasChanged();
    }

    private async Task LoadCart()
    {
        try
        {
            cartProducts = await CartClient.GetCartGames();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading cart: {ex.Message}");
        }
    }

    private async Task RemoveFromCart(int gameId)
    {
        await CartClient.RemoveGameFromCart(gameId);
    }

    private async Task UpdateQuantity(CartItem item, int newQuantity)
    {
        if (newQuantity < 1)
            return;

        item.Quantity = newQuantity;
        await CartClient.UpdateQuantity(item);
    }

    public void Dispose()
    {
        CartClient.OnChange -= HandleCartChange;
    }
}
