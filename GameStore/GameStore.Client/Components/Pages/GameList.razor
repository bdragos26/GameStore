@page "/gameList"
@inject NavigationManager NavigationManager
@inject IGamesClient gamesClient
@inject IGenresClient genresClient
@rendermode InteractiveWebAssembly

<PageTitle>Game Catalog</PageTitle>

<AuthorizeView Roles="Admin">
	<div class="mt-2">
		<NavLink class="btn btn-primary" href="/EditGame">New Game</NavLink>
	</div>
</AuthorizeView>

@if (games == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<div class="search-container mb-4" style="margin-top: 20px;">
		<div class="search-box">
			<i class="bi bi-search search-icon"></i>
			<InputText class="search-input form-control" placeholder="Search games..."
			           @bind-Value="SearchTerm" @oninput="(e) => SearchTerm = e.Value?.ToString() ?? string.Empty" />
			@if (!string.IsNullOrEmpty(SearchTerm))
			{
				<button class="clear-search" @onclick="() => SearchTerm = string.Empty">
					<i class="bi bi-x"></i>
				</button>
			}
		</div>
		<div class="search-results-info">
			Showing @pagedGames.Count() of @filteredGames.Count() results
			@if (!string.IsNullOrEmpty(SearchTerm))
			{
				<span>for "@SearchTerm"</span>
			}
		</div>
	</div>

	<div class="row mb-3">
		<div class="col-md-4">
			<label for="genreSelect" class="form-label">Genre</label>
			<InputSelect @bind-Value="selectedGenreId" id="genreSelect" class="form-select" @onchange="OnFilterChanged">
				<option value="">All</option>
				@foreach (var genre in genres)
				{
					<option value="@genre.GenreId">@genre.Name</option>
				}
			</InputSelect>
		</div>

		<div class="col-md-4">
			<label for="maxPrice" class="form-label">Max price</label>
			<InputNumber @bind-Value="maxPrice" id="maxPrice" class="form-control" @oninput="OnFilterChanged" />
		</div>

		<div class="col-md-4">
			<label for="minDate" class="form-label">Released after</label>
			<InputDate @bind-Value="minReleaseDate" id="minDate" class="form-control" @onchange="OnFilterChanged" />
		</div>
	</div>

	<div class="text-end mb-3">
		<button class="btn btn-outline-secondary" @onclick="ResetFilters">
			<i class="bi bi-arrow-counterclockwise"></i> Reset Filters
		</button>
	</div>

	<div class="row row-cols-1 row-cols-md-3 g-4" style="margin-top: 30px;">
		@foreach (var game in pagedGames)
		{
			<div class="col">
				<div class="card h-100 position-relative" style="cursor: pointer;">
					<div @onclick="@(() => GoToDetails(game.GameId))">
						<img src="@game.ImageUrl" class="card-img-top" alt="@game.Name" style="height: 200px; object-fit: cover;" />
						<div class="card-body">
							<h5 class="card-title">@game.Name</h5>
							<p class="card-text">
								Genre: @genres.FirstOrDefault(g => g.GenreId == game.GenreId)?.Name <br />
								Price: $@game.Price <br />
								Release: @game.ReleaseDate.ToShortDateString()
							</p>
						</div>
					</div>

					<AuthorizeView Roles="Admin">
						<div class="m-2 d-flex">
							<button class="btn btn-primary me-2" @onclick="@(() => GoToEdit(game.GameId))">
								<i class="bi bi-pencil"></i>
							</button>
							<button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="@GetDeleteModalId(game)">Delete</button>
						</div>
						<DeleteGame Game="@game" />
					</AuthorizeView>
				</div>
			</div>
		}
	</div>

	<div class="d-flex flex-column align-center">
		<MudPagination BoundaryCount="1" MiddleCount="1" Count="totalPages" @bind-Selected="@currentPage" Class="mt-4" />
	</div>
}

@code {
	private List<Game>? games;
	private List<Genre>? genres;
	private int currentPage = 1;
	private int pageSize = 3;
	private IEnumerable<Game> pagedGames => filteredGames.Skip((currentPage - 1) * pageSize).Take(pageSize);
	private int totalPages => (int)Math.Ceiling((double)filteredGames.Count() / pageSize);

	private string searchTerm = string.Empty;
	private string SearchTerm
	{
		get => searchTerm;
		set
		{
			searchTerm = value;
			currentPage = 1;
		}
	}

	private int? selectedGenreId;
	private double? maxPrice;
	private DateOnly? minReleaseDate;

	private IEnumerable<Game> filteredGames =>
		games
			.Where(g => string.IsNullOrWhiteSpace(SearchTerm) || g.Name.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase))
			.Where(g => !selectedGenreId.HasValue || g.GenreId == selectedGenreId)
			.Where(g => !maxPrice.HasValue || g.Price <= maxPrice)
			.Where(g => !minReleaseDate.HasValue || g.ReleaseDate >= minReleaseDate);

	protected override async Task OnInitializedAsync()
	{
		games = await gamesClient.GetGamesAsync();
		genres = await genresClient.GetGenresAsync();
	}

	private string GetDeleteModalId(Game game)
	{
		return $"#{DeleteGame.GetModalId(game)}";
	}

	private void GoToEdit(int id)
	{
		NavigationManager.NavigateTo($"/EditGame/{id}");
	}

	private void GoToDetails(int id)
	{
		NavigationManager.NavigateTo($"/GameDetails/{id}");
	}

	private void OnFilterChanged()
	{
		currentPage = 1;
		StateHasChanged();
	}

	private void ResetFilters()
	{
		SearchTerm = string.Empty;
		selectedGenreId = null;
		maxPrice = null;
		minReleaseDate = null;
		currentPage = 1;
	}
}