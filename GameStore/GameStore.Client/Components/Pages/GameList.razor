@page "/gameList"
@inject NavigationManager NavigationManager
@inject IGamesClient gamesClient
@inject IGenresClient genresClient
@implements IDisposable
@rendermode InteractiveWebAssembly

<PageTitle>Game Catalog</PageTitle>

<AuthorizeView Roles="Admin">
    <div class="mt-2">
        <NavLink class="btn btn-primary" href="/EditGame">New Game</NavLink>
    </div>
</AuthorizeView>

@if (pagedResult == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="search-container mb-4" style="margin-top: 20px;">
        <div class="search-box">
            <i class="bi bi-search search-icon"></i>
            <InputText class="search-input form-control" placeholder="Search games..."
                       @bind-Value="SearchTerm" @oninput="OnSearchInput" />
            @if (!string.IsNullOrEmpty(SearchTerm))
            {
                <button class="clear-search" @onclick="ClearSearch">
                    <i class="bi bi-x"></i>
                </button>
            }
        </div>
        <div class="search-results-info">
            Showing @pagedResult.Items.Count of @pagedResult.TotalCount results
            @if (!string.IsNullOrEmpty(SearchTerm))
            {
                <span>for "@SearchTerm"</span>
            }
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-4">
            <label for="genreSelect" class="form-label">Genre</label>
            <InputSelect @bind-Value="selectedGenreId" id="genreSelect" class="form-select" @bind-Value:after="OnFilterChanged">
                <option value="">All</option>
                @foreach (var genre in genres)
                {
                    <option value="@genre.GenreId">@genre.Name</option>
                }
            </InputSelect>
        </div>

        <div class="col-md-4">
            <label for="maxPrice" class="form-label">Max price</label>
            <InputNumber @bind-Value="maxPrice" id="maxPrice" class="form-control" @bind-Value:after="OnFilterChanged" />
        </div>

        <div class="col-md-4">
            <label for="minDate" class="form-label">Released after</label>
            <InputDate @bind-Value="minReleaseDate" id="minDate" class="form-control" @bind-Value:after="OnFilterChanged" />
        </div>
    </div>

    <div class="text-end mb-3">
        <button class="btn btn-outline-secondary" @onclick="ResetFilters">
            <i class="bi bi-arrow-counterclockwise"></i> Reset Filters
        </button>
    </div>

    <div class="row row-cols-1 row-cols-md-3 g-4" style="margin-top: 30px;">
        @foreach (var game in pagedResult.Items)
        {
            <div class="col">
                <div class="card h-100 position-relative" style="cursor: pointer;">
                    <div @onclick="@(() => GoToDetails(game.GameId))">
                        <img src="@game.ImageUrl" class="card-img-top" alt="@game.Name" style="height: 200px; object-fit: cover;" />
                        <div class="card-body">
                            <h5 class="card-title">@game.Name</h5>
                            <p class="card-text">
                                Genre: @genres.FirstOrDefault(g => g.GenreId == game.GenreId)?.Name <br />
                                Price: $@game.Price <br />
                                Release: @game.ReleaseDate.ToShortDateString()
                            </p>
                        </div>
                    </div>

                    <AuthorizeView Roles="Admin">
                        <div class="m-2 d-flex">
                            <button class="btn btn-primary me-2" @onclick="@(() => GoToEdit(game.GameId))">
                                <i class="bi bi-pencil"></i>
                            </button>
                            <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="@GetDeleteModalId(game)">Delete</button>
                        </div>
                        <DeleteGame Game="@game" />
                    </AuthorizeView>
                </div>
            </div>
        }
    </div>

    <div class="d-flex flex-column align-center">
        <MudPagination BoundaryCount="1" MiddleCount="1"
                       Count="@((int)Math.Ceiling((double)pagedResult.TotalCount / pageSize))"
                       Selected="@currentPage"
                       SelectedChanged="@OnPageChanged"
                       Class="mt-4" />
    </div>
}

@code {
    private List<Genre>? genres;
    private PagedResult<Game>? pagedResult;
    private int currentPage = 1;
    private int pageSize = 5;
    private Timer? searchTimer;
    private string SearchTerm { get; set; } = string.Empty;
    private int? selectedGenreId;
    private double? maxPrice;
    private DateTime? minReleaseDate;

    protected override async Task OnInitializedAsync()
    {
        genres = await genresClient.GetGenresAsync();
        await LoadFilteredGamesAsync();
    }

    private async Task LoadFilteredGamesAsync()
    {
        var filter = new GameFilterDto
        {
            SearchTerm = SearchTerm,
            GenreId = selectedGenreId,
            MaxPrice = maxPrice,
            MinReleaseDate = minReleaseDate.HasValue ? DateOnly.FromDateTime(minReleaseDate.Value) : null,
            PageNumber = currentPage,
            PageSize = pageSize
        };

        pagedResult = await gamesClient.GetFilteredGamesAsync(filter);
    }

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        SearchTerm = e.Value?.ToString() ?? string.Empty;

        searchTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                currentPage = 1;
                await LoadFilteredGamesAsync();
                StateHasChanged();
            });
        }, null, 500, Timeout.Infinite);
    }

    private async Task ClearSearch()
    {
        SearchTerm = string.Empty;
        currentPage = 1;
        await LoadFilteredGamesAsync();
    }

    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadFilteredGamesAsync();
    }

    private async Task OnFilterChanged()
    {
        currentPage = 1;
        await LoadFilteredGamesAsync();
        StateHasChanged();
    }

    private string GetDeleteModalId(Game game)
    {
        return $"#{DeleteGame.GetModalId(game)}";
    }

    private void GoToEdit(int id)
    {
        NavigationManager.NavigateTo($"/EditGame/{id}");
    }

    private void GoToDetails(int id)
    {
        NavigationManager.NavigateTo($"/GameDetails/{id}");
    }

    private async Task ResetFilters()
    {
        SearchTerm = string.Empty;
        selectedGenreId = null;
        maxPrice = null;
        minReleaseDate = null;
        currentPage = 1;
        await LoadFilteredGamesAsync();
    }

    public void Dispose()
    {
        searchTimer?.Dispose();
    }
}