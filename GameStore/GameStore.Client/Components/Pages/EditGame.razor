@page "/EditGame"
@page "/EditGame/{id:int}"
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IGamesClient gamesClient
@inject IGenresClient genresClient
@inject IStringLocalizer<SharedResources> L
@attribute [Authorize(Roles="Admin")]
@rendermode InteractiveWebAssembly

<PageTitle>@title</PageTitle>

<h3>@title</h3>

@if (genres == null || game == null)
{
	<p><em>@L["Loading"]</em></p>
}
else
{
	<div class="row">
		<div class="col-md-4">
			<EditForm Model="@game" OnValidSubmit="HandleSubmitAsync" FormName="Newgame">
			<DataAnnotationsValidator/>
			<div class="mb-3">
				<label for="name" class="form-label">@L["Name"]: </label>
				<InputText id="name" class="form-control" @bind-Value="game.Name"/>
				<ValidationMessage For="@(() => game.Name)"/>
			</div>
			<div class="mb-3">
				<label for="genre" class="form-label">@L["Genre"]: </label>
				<InputSelect id="genre" class="form-control" @bind-Value="game.GenreId">
					<option value="">Select a genre</option>
					@foreach (var genre in genres)
					{
						<option value="@genre.GenreId">@genre.Name</option>
					}
				</InputSelect>
				<ValidationMessage For="@(() => game.GenreId)"/>

			</div>
			<div class="mb-3">
				<label for="price" class="form-label">@L["Price"]: </label>
				<InputNumber id="price" class="form-control" @bind-Value="game.Price"/>
				<ValidationMessage For="@(() => game.Price)"/>
			</div>
			<div class="mb-3">
				<label for="releaseDate" class="form-label">@L["Release"]: </label>
				<InputDate id="releaseDate" class="form-control" @bind-Value="game.ReleaseDate"/>
			</div>
			<div class="mb-3">
				<label for="imageUpload" class="form-label">@L["Image"]: </label>
				<InputFile id="imageUpload" OnChange="OnImageUpload" />
				@if (game.ImageData != null)
				{
					<img src="@($"data:image/jpeg;base64,{Convert.ToBase64String(game.ImageData)}")" style="max-width: 200px; max-height: 200px; margin-top: 10px;" />
				}
			</div>

				<button class="btn btn-primary" type="submit">@L["Submit"]</button>
				<button class="btn btn-secondary" @onclick="CancelAsync">@L["Cancel"]</button>
			</EditForm>
		</div>
	</div>
}

@code {
	[SupplyParameterFromForm]
	public Game? game { get; set; }
	private List<Genre>? genres;
	[Parameter]
	public int? Id { get; set; }

	private string title = string.Empty;

	protected override async Task OnParametersSetAsync()
	{
		if (game != null)
		{
			return;
		}
		if (Id != null)
		{
			game = await gamesClient.GetGameByIdAsync(Id.Value);
			title = $"Edit {game.Name}";
		}
		else
		{
			game = new()
			{
				Name = string.Empty,
				ReleaseDate = DateOnly.FromDateTime(DateTime.Now),
				ImageData = null
			};
			title = L["NewGame"];
		}
	}

	protected override async Task OnInitializedAsync()
	{
		genres = await genresClient.GetGenresAsync();
	}

	private async Task HandleSubmitAsync()
	{
		if (Id == null)
		{
			await gamesClient.AddGameAsync(game);
		}
		else
		{
			game.GameId = Id.Value;
			await gamesClient.UpdateGameAsync(game);
		}
		NavigationManager.NavigateTo("/gameList");
	}

	IJSObjectReference jsmodule;

	public async Task CancelAsync()
	{
		string message = L["showConfirm"];
		jsmodule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "/Components/Pages/EditGame.razor.js");
		var leave = await jsmodule.InvokeAsync<bool>("showConfirm", message);
		if (leave)
		{
			NavigationManager.NavigateTo("/");
		}
	}

	private async Task OnImageUpload(InputFileChangeEventArgs e)
	{
		var file = e.File;
		if (file != null)
		{
			using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);
			using var ms = new MemoryStream();
			await stream.CopyToAsync(ms);
			game.ImageData = ms.ToArray();
		}
	}
}