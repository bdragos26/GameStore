@page "/GameDetails/{GameId:int}"
@using System.Security.Claims
@inject IGamesClient gamesClient
@inject IGenresClient genresClient
@inject ICartClient CartClient
@inject AuthenticationStateProvider AuthProvider
@inject IStringLocalizer<SharedResources> L
@rendermode InteractiveWebAssembly

<PageTitle>@L["GameDetails"]</PageTitle>

@if (game == null)
{
	<p><em>@L["Loading"]</em></p>
}
else
{
	<div class="container mt-5 d-flex justify-content-center">
		<div class="card shadow" style="width: 100%; max-width: 900px; min-height: 500px;">
			<div class="row g-0 h-100">
				<img src="@game.ImageUrl"
				     class="img-fluid rounded-start"
				     alt="@game.Name"
				     style="height: 100%; max-height: 400px; object-fit: cover; width: 100%;" />
				<div class="col-md-7 d-flex align-items-center">
					<div class="card-body">
						<h3 class="card-title">@game.Name</h3>
						<p class="card-text"><strong>@L["Genre"]:</strong> @genre?.Name</p>
						<p class="card-text"><strong>@L["Price"]:</strong> $@game.Price</p>
						<p class="card-text"><strong>@L["Release"]:</strong> @game.ReleaseDate.ToShortDateString()</p>
					</div>
				</div>
			</div>
			
			<div class="mt-4" style="margin-left: 10px; margin-bottom: 10px;">
				<button class="btn btn-success" @onclick="AddToCart">
					<i class="bi bi-cart-plus me-2"></i> @L["AddToCart"]
				</button>
				@if (showAddedMessage)
				{
					<span class="ms-3 text-success">
						<i class="bi bi-check-circle"></i> @L["AddedToCart"]
					</span>
				}
			</div>
			
			<Rating GameId="@game.GameId" UserId="@userId"></Rating>

			<span>
				<a href="/gameList" class="btn btn-outline-primary" style="margin-top: 20px; margin-left: 10px; margin-bottom: 20px;">@L["BackToMenu"]</a>
			</span>
		</div>
	</div>
}

@code {
	[Parameter]
	public int GameId { get; set; }
	private Game? game;
	private Genre? genre;
	private int userId;
	private bool showAddedMessage = false;

	protected override async Task OnInitializedAsync()
	{
		game = await gamesClient.GetGameByIdAsync(GameId);
		var genres = await genresClient.GetGenresAsync();
		genre = genres.FirstOrDefault(g => g.GenreId == game.GenreId);

		var authState = await AuthProvider.GetAuthenticationStateAsync();
		var userIdClaim = authState.User.FindFirst(ClaimTypes.NameIdentifier);
		if (userIdClaim != null && int.TryParse(userIdClaim.Value, out var parsedUserId))
		{
			userId = parsedUserId;
		}
	}

	private async Task AddToCart()
	{
		if (game != null)
		{
			var cartItem = new CartItem
			{
				GameId = game.GameId,
				Name = game.Name,
				Price = game.Price,
				Quantity = 1
			};

			await CartClient.AddToCart(cartItem);

			showAddedMessage = true;
			StateHasChanged();
			await Task.Delay(2000);
			showAddedMessage = false;
			StateHasChanged();
		}
	}
}