@page "/gameList"  
@inject NavigationManager NavigationManager  
@inject IGamesClient gamesClient
@inject IGenresClient genresClient
@rendermode InteractiveServer

<PageTitle>Game Catalog</PageTitle>  

<AuthorizeView Roles="Admin">
	<div class="mt-2">  
		<NavLink class="btn btn-primary" href="/EditGame">New Game</NavLink>  
	</div>  
</AuthorizeView>

@if (games == null)  
{  
	<p><em>Loading...</em></p>  
}  
else  
{  
	<div class="row row-cols-1 row-cols-md-3 g-4" style="margin-top: 30px;">
		@foreach (var game in pagedGames)
		{
			<div class="col">
				<div class="card h-100 position-relative" style="cursor: pointer;">
					<div @onclick="@(() => GoToDetails(game.GameId))" >
						<img src="@game.ImageUrl" class="card-img-top" alt="@game.Name" style="height: 200px; object-fit: cover;"/>
						<div class="card-body">
							<h5 class="card-title">@game.Name</h5>
							<p class="card-text">
								Genre: @genres.FirstOrDefault(g => g.GenreId == game.GenreId)?.Name <br/>
								Price: $@game.Price <br/>
								Release: @game.ReleaseDate.ToShortDateString()
							</p>
						</div>
					</div>

					<AuthorizeView Roles="Admin">
						<div class="m-2 d-flex">
							<button class="btn btn-primary me-2" @onclick="@(() => GoToEdit(game.GameId))">
								<i class="bi bi-pencil"></i>
							</button>
							<button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="@GetDeleteModalId(game)">Delete</button>
						</div>
						<DeleteGame Game="@game"/>
					</AuthorizeView>
				</div>
			</div>
		}
	</div>

	<div class="d-flex justify-content-center mt-4">
		<button class="btn @(!(currentPage > 1) ? "btn-secondary" : "btn-info") me-2" @onclick="PreviousPage" disabled="@(!(currentPage > 1))">Previous</button>
		@foreach (var page in GetVisiblePages())
		{
			if (page == -1)
			{
				<span class="mx-2">...</span>
			}
			else
			{
				<button class="btn @(page == currentPage ? "btn-dark" : "btn-outline-secondary")" @onclick="@(() => ChangePage(page))">@Convert.ToString(page)</button>
			}
		}
		<button class="btn @(!(currentPage < totalPages) ? " btn-secondary" : "btn-info" ) ms-2" @onclick="NextPage" disabled="@(!(currentPage < totalPages))">Next</button>
	</div>
}  

@code {
	private List<Game> games;  
	private List<Genre> genres;
	private int currentPage = 1;
	private int pageSize = 3;
	private IEnumerable<Game> pagedGames => games.Skip((currentPage - 1) * pageSize).Take(pageSize);
	private int totalPages => (int)Math.Ceiling((double)games.Count / pageSize);

	protected override async Task OnInitializedAsync()
	{
		games = await gamesClient.GetGamesAsync();
		genres = await genresClient.GetGenresAsync();
	}  

	private string GetDeleteModalId(Game game)  
	{  
		return $"#{DeleteGame.GetModalId(game)}";  
	}  

	private void GoToEdit(int id)  
	{  
		NavigationManager.NavigateTo($"/EditGame/{id}");  
	}

	private void GoToDetails(int id)
	{
		NavigationManager.NavigateTo($"/GameDetails/{id}");
	}

	private void PreviousPage()
	{
		if (currentPage > 1)
		{
			currentPage--;
		}
	}

	private void NextPage()
	{
		if (currentPage < totalPages)
		{
			currentPage++;
		}
	}

	private void ChangePage(int page)
	{
		if (page >= 1 && page <= totalPages)
		{
			currentPage = page;
		}
	}

	private IEnumerable<int> GetVisiblePages()
	{
		const int maxVisibleRange = 1;
		List<int> pages = new();
		pages.Add(1);
		if (currentPage - maxVisibleRange > 2)
		{
			pages.Add(-1);
		}
		for (int i = currentPage - maxVisibleRange; i <= currentPage + maxVisibleRange; i++)
		{
			if (i > 1 && i < totalPages)
			{
				pages.Add(i);
			}
		}
		if (currentPage + maxVisibleRange < totalPages - 1)
		{
			pages.Add(-1);
		}
		if (totalPages > 1)
		{
			pages.Add(totalPages);
		}
		return pages.Distinct();
	}
}