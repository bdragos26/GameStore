@inject IGameRatingClient GameRatingClient
@inject NavigationManager NavigationManager

<div class="rating">
	@for (int i = 1; i <= 5; i++)
	{
		var index = i; 
		<span style="margin-left:5px; cursor: pointer; color: @(index <= currentRating ? "gold" : "gray")" @onclick="@(() => SetRating(index))">
			<i class="bi bi-star-fill"></i>
		</span>
	}
</div>

<h4 class="text-muted" style="margin-left: 10px; margin-top: 5px;">
	Average rating: <strong>@averageRating.ToString("0.0")</strong> / 5
</h4>

@if (ratings?.Any() == true)
{
	<div class="mt-4">
		<h5 class="mb-3" style="margin-left: 10px;">Other users ratings</h5>
		@foreach (var rating in ratings)
		{
			<div class="user-rating-card">
				<div><strong>@rating.User?.Username</strong></div>
				<div class="rating-stars">
					@for (int i = 1; i <= 5; i++)
					{
						<i style="color: @(i <= rating.Score ? "gold" : "gray")" class="bi @(i <= rating.Score ? "bi-star-fill" : "bi-star")"></i>
					}
				</div>
			</div>
		}
	</div>
}
else
{
	<p class="text-muted">This game was not rated by other users</p>
}

@code {
	[Parameter] 
	public int GameId { get; set; }
	[Parameter] 
	public int UserId { get; set; }
	private int currentRating = 0;
	private List<GameRating> ratings = new();
	private double averageRating = 0;

	protected override async Task OnInitializedAsync()
	{
		var rating = await GameRatingClient.GetGameRatingAsync(UserId, GameId);
		if (rating != null)
		{
			currentRating = rating.Score;
		}

		var allRatings = await GameRatingClient.GetRatingsForGameAsync(GameId);
		ratings = allRatings.Where(r => r.UserId != UserId).ToList();

		averageRating = allRatings.Any() ? allRatings.Average(r => r.Score) : 0;
	}

	private async Task SetRating(int score)
	{
		currentRating = score;
		await GameRatingClient.UpdateGameRatingAsync(new GameRating()
		{
			UserId = UserId,
			GameId = GameId,
			Score = currentRating
		});

		var allRatings = await GameRatingClient.GetRatingsForGameAsync(GameId);
		ratings = allRatings.Where(r => r.UserId != UserId).ToList();
		NavigationManager.Refresh(true);
	}
}
